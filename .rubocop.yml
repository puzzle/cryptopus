require: rubocop-rails

AllCops:
  DisplayCopNames: true
  Exclude:
    - Rakefile
    - db/**/*
    - config/**/*
    - lib/tasks/**/*
    - test/**/*
    - tmp/**/*
    - test/**/*
    - vendor/bundle/**/*
    - node_modules/**/*
    - frontend/**/*

Rails:
  Enabled: true

Metrics/BlockLength:
  ExcludedMethods:
    - namespace # rake
    - task # rake
    - scope # routes
    - resources # routes
    - draw # routes
    - configure # initializers

Metrics/AbcSize:
  Max: 20
  Severity: error

Metrics/ClassLength:
  Max: 200
  Severity: error

Metrics/ModuleLength:
  Max: 200
  Severity: error

Metrics/CyclomaticComplexity:
  Max: 6
  Severity: error

Layout/LineLength:
  Max: 100
  Severity: warning
  AutoCorrect: true

Metrics/MethodLength:
  Max: 10
  Severity: error

Metrics/ParameterLists:
  Max: 4
  Severity: warning

Layout/ClassStructure:
  Enabled: true

# controller#entry methods have @model_name instance variables.
# therefore disable this cop
Naming/MemoizedInstanceVariableName:
  Enabled: false

Naming/MethodParameterName:
  Enabled: false

# We thinks that's fine
Rails/EnumHash:
  Enabled: false

# Keep for now, easier with superclass definitions
Style/ClassAndModuleChildren:
  Enabled: false

# The ones we use must exist for the entire class hierarchy.
Style/ClassVars:
  Enabled: false

# We think there are good reasons not to do that
Rails/RakeEnvironment:
  Enabled: false

Style/EmptyMethod:
  EnforcedStyle: expanded

# We thinks that's fine
Style/FormatStringToken:
  Enabled: false


Style/HashSyntax:
  Exclude:
    - lib/tasks/**/*.rake

Style/SymbolArray:
  EnforcedStyle: brackets

Rails/Output:
  Exclude:
    - db/seeds.rb

# map instead of collect, reduce instead of inject.
# Probably later
Style/CollectionMethods:
  Enabled: false

# This cop does not consider action inheritance, therefore disabled
Rails/LexicallyScopedActionFilter:
  Enabled: false

# Well, well, well
Style/Documentation:
  Enabled: false

# Probably later
Layout/DotPosition:
  Enabled: false

# Missing UTF-8 encoding statements should always be created.
Style/Encoding:
  Severity: error

# Keep single line bodys for if and unless
Style/IfUnlessModifier:
  Enabled: false

# That's no huge stopper
Layout/EmptyLines:
  Enabled: false

# We thinks that's fine for specs
Layout/EmptyLinesAroundBlockBody:
  Enabled: false

# We thinks that's fine
Layout/EmptyLinesAroundClassBody:
  Enabled: false

# We thinks that's fine
Layout/EmptyLinesAroundModuleBody:
  Enabled: false

# We thinks that's fine
Layout/MultilineOperationIndentation:
  Enabled: false

# We thinks that's fine
Style/RegexpLiteral:
  Enabled: false

# We think that's the developers choice
Style/SymbolProc:
  Enabled: false

# Probably later
Style/GuardClause:
  Enabled: false

# We thinks that's fine
Style/SingleLineBlockParams:
  Enabled: false

# We thinks that's fine
Rails/HasAndBelongsToMany:
  Enabled: false

# We think that's the developers choice
Rails/Delegate:
  Enabled: false

Rails/HelperInstanceVariable:
  Enabled: false

Rails/InverseOf:
  Enabled: false

Rails/OutputSafety:
  Severity: warning
